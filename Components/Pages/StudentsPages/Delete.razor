@page "/students/delete"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Student</PageTitle>

<h1><i class="fa-solid fa-trash"></i> Delete Student</h1>

<h3>Are you sure you want to delete this student?</h3>
<div>
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h4>Student Details</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@student.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Code</dt>
            <dd class="col-sm-10">@student.Code</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone Number</dt>
            <dd class="col-sm-10">@student.PhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@student.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@student.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Sex</dt>
            <dd class="col-sm-10">@student.Sex</dd>
        </dl>

        <form method="post" @onsubmit="DeleteStudent">
            <button type="submit" class="btn btn-danger" disabled="@(student is null)">Delete</button>
            <a class="btn btn-success" href="/students">Back to List</a>
        </form>
    }
</div>

@code {
    private ApplicationUser? student;

    [SupplyParameterFromQuery]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.ApplicationUser.FirstOrDefaultAsync(u => u.Id == Id && u.Role == "Student");

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStudent()
    {
        using var context = DbFactory.CreateDbContext();
        context.ApplicationUser.Remove(student!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/students");
    }
}
