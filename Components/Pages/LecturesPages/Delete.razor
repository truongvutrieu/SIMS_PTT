@page "/lecturers/delete"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1><i class="fa-solid fa-trash"></i> Delete Lecturer</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Lecturer</h4>
    <hr />
    @if (lecturer is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name:</dt>
            <dd class="col-sm-10">@lecturer.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Code:</dt>
            <dd class="col-sm-10">@lecturer.Code</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone Number:</dt>
            <dd class="col-sm-10">@lecturer.PhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address:</dt>
            <dd class="col-sm-10">@lecturer.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Sex:</dt>
            <dd class="col-sm-10">@lecturer.Sex</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email:</dt>
            <dd class="col-sm-10">@lecturer.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Role:</dt>
            <dd class="col-sm-10">@lecturer.Role</dd>
        </dl>
        <EditForm Model="lecturer" OnValidSubmit="DeleteLecturer">
            <button type="submit" class="btn btn-danger" disabled="@(lecturer is null)">Delete</button>
            <a class="btn btn-success" href="/lecturers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ApplicationUser? lecturer;

    [SupplyParameterFromQuery]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        lecturer = await context.ApplicationUser.FirstOrDefaultAsync(u => u.Id == Id && u.Role == "Lecture");

        if (lecturer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteLecturer()
    {
        using var context = DbFactory.CreateDbContext();
        context.ApplicationUser.Remove(lecturer!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/lecturers");
    }
}
